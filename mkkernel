#!/bin/bash

KBINDIR=~/kbin
TARGET=$1
shift 1
OPTS=$*

perr() { # message
  echo "Error: "$1
  exit 0
}

check_gitdir() { # dir
  test -d $1/.git
}

exist() { # binary
  which $1 &> /dev/null
}

check_gitdir $PWD || perr "Failed to find git repository in $PWD"

# Setup arch and cross compile environment
if [ -z "$ARCH" ]; then
  ARCH=`uname -m`
fi
CROSS_COMPILE=
GEN_ARCH=
case $ARCH in
  i*86)
    ARCH=x86
  ;;
  x86_64)
    GEN_ARCH=x86
  ;;
  arm)
    CROSS_COMPILE=arm-linux-gnueabihf-
    exist ${CROSS_COMPILE}gcc || CROSS_COMPILE=arm-linux-gnueabi-
  ;;
  arm64|aarch64)
    ARCH=arm64
    CROSS_COMPILE=aarch64-linux-gnu-
  ;;
esac
[ -z "$GEN_ARCH" ] && GEN_ARCH=$ARCH
echo "Make a $ARCH kernel"
if [ "$CROSS_COMPILE" ]; then
  if exist ${CROSS_COMPILE}gcc; then
    echo "Use ${CROSS_COMPILE}gcc for cross build"
  else
    perr "Failed to find cross build tool. Please install ${CROSS_COMPILE}gcc."
  fi
fi
export ARCH
export CROSS_COMPILE

SRCDIR=$PWD
BINDIR=$KBINDIR/`basename $PWD`.$ARCH

[ -d $BINDIR ] || mkdir -p $BINDIR || perr "Failed to make kbindir"

NR_CPUS=`grep processor /proc/cpuinfo | wc -l`
JOBS=`expr $NR_CPUS \* 2`
SUDO=

get_kernel_release() {
  make O=$BINDIR kernelrelease | tail -n 1
}

do_make() { # target options
  echo make O=$BINDIR -j$JOBS $*
  $SUDO make O=$BINDIR -j$JOBS $*
}

sudo_make() { #target options
  SUDO=sudo 
  do_make $*
  SUDO= 
}

do_make_log() { # target options
  do_make $* 2>&1 | tee make.log
  grep '^[a-zA-Z/].*' make.log > error.log
}

copy_config() { #file
  if [ "$1" -a -f "$1" ]; then
    cp -f $1 $BINDIR/.config
  else
    [ -f /boot/config-`uname -r` ] && \
      cp -f /boot/config-`uname -r` $BINDIR/.config && return
    [ -f /proc/config.gz ] && \
      zcat /proc/config.gz > $BINDIR/.config && return
    [ -f /proc/config ] && \
      cat /proc/config > $BINDIR/.config && return
  fi
}

kconf_enabled() {
  grep "CONFIG_$1=[ym]" $BINDIR/.config >& /dev/null
}

store_file() { # path orig_root new_root
  mkdir -p `dirname $3/$1`
  echo cp -r $2/$1 $3/$1
  cp -r $2/$1 $3/$1
}

install_build_files() { #files
  for i in $*; do
    store_file $i $BINDIR $BUILD_PATH
  done
}

make_installer() {
  KREL=`get_kernel_release`
  tmpdir=`mktemp -d`

  export INSTALL_MOD_PATH=$tmpdir
  mkdir -p $tmpdir/boot
  mkdir -p $tmpdir/lib/modules
  do_make modules_install
  MOD_PATH=$tmpdir/lib/modules/$KREL
  if [ ! -d $MOD_PATH ]; then
    perr "Unexpectedly failed to find $MOD_PATH as a directry"
  fi

  export BUILD_PATH=$MOD_PATH/build
  if [ ! -L $BUILD_PATH ]; then
    perr "Unexpectedly failed to find $BUILD_PATH as a symbolic link"
  fi
  rm -f $BUILD_PATH
  mkdir $BUILD_PATH
  install_build_files System.map arch/$ARCH/boot/bzImage .config
  kconf_enabled DEBUG_INFO && install_build_files vmlinux

  if kconf_enabled MODULES ; then
    install_build_files include scripts arch/$GEN_ARCH/include
    if kconf_enabled MODULE_SIG ; then
      install_build_files signing_key.priv signing_key.x509
    fi
  fi

  installer=kernel-installer-${KREL}.sh
  tempfile=`mktemp`
  pushd $tmpdir/lib/modules
  echo "Packing ..."
  tar cjf $tempfile $KREL
  echo "Done"
  popd
  unpacked_size=`du -sh $tempdir/lib/modules | cut -f1 -d" "`
  size=`stat --format=%s $tempfile`
cat > $installer <<EOF
#!/bin/sh
self=\$0
echo "Installing linux-$KREL: will consume $unpacked_size"
tail --bytes=$size \$self | tar xvjf - -C /lib/modules
installkernel $KREL /lib/modules/$KREL/build/arch/$ARCH/boot/bzImage /lib/modules/$KREL/build/System.map
exit 0
EOF
  cat $tempfile >> $installer
  chmod a+x $installer

  rm -rf $tmpdir $tempfile
}

cscope_run() {
  if [ ! -f $BINDIR/cscope.out ]; then
    JOBS=1
    do_make cscope
  fi
  cscope -d -f $BINDIR/cscope.out
}

case $TARGET in
 copyconfig)
   copy_config $OPTS
   ls -a $BINDIR
   do_make oldconfig
 ;;
 alllog)
   do_make_log all $OPTS
 ;;
 kinstall)
   JOBS=1
   sudo_make modules_install install 
 ;;
 installer)
   JOBS=1
   make_installer
 ;;
 cscope)
   cscope_run
 ;;
 help)
 ;;
 *)
   do_make $TARGET
 ;;
esac
