#!/bin/sh
# chns : Pure shell script change namespace command
# This requires util-linux newer than 2.24 (unshare "-f"
# option and mount correctly support /proc/mounts)

# Exit if any errors
set -e

rwbind() { # dir
  mount --bind $1 $RD$1
}

robind() { # dir
  mount --bind -o ro $1 $RD$1
}

# If PID=1, this is in the new world
if [ $$ -eq 1 ]; then
  # Ensure the TMPDIR is given
  test -d "$TMPDIR"

  # Make working directories
  RD=$TMPDIR/newroot
  UD=$TMPDIR/storage
  WD=$TMPDIR/temp
  mkdir $RD $UD $WD

  # Make private mount namespace
  mount --make-rprivate /

  # Prepare overlayed root directory
  mount -t overlay -o upperdir=$UD,lowerdir=/,workdir=$WD overlayfs $RD

  # Prepare /dev special files
  mount -t tmpfs tmpfs $RD/dev
  mkdir $RD/dev/pts; rwbind /dev/pts
  touch $RD/dev/console; rwbind /dev/console
  touch $RD/dev/null; rwbind /dev/null
  # TODO: Add other devices here

  # Do not bind procfs, since it shows outside pids
  mount -t proc proc $RD/proc
  robind /proc/sys
  robind /proc/sysrq-trigger
  robind /proc/irq
  robind /proc/bus
  robind /sys

  # To unmount all unused mountpoints, use pivot_root to change root
  cd $RD
  mkdir .orig
  pivot_root . .orig
  umount -R .orig/ >/dev/null 2>&1 || echo -n

  # The original root can not unmount because it referred by overlayfs.
  # So, we pivot to the root again, and chroot to overlay directory.
  cd /.orig/
  pivot_root . mnt/

  exec chroot mnt/ $@
fi

usage() { # [error messages]
  test $# -ne 0 && echo "$*"
  echo "$0 - Run given command in a temporary namespace"
  echo "Usage: $0 <command> [argument...]"
  exit $#
}

# Parse options
while [ "$1" ]; do
case "$1" in
  --help|-h)
    usage
    ;;
  [!-]*)
    break
    ;;
  *)
    usage "Parse error: $1 is not supported."
esac
done

export TMPDIR=`mktemp -d /tmp/chns-XXXXXXXX`
trap "rm -rf $TMPDIR" EXIT

# Enter new namespace and exec command
unshare -pf -m $0 $@

