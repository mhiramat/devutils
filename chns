#!/bin/sh
# chns : Pure shell script change namespace command
# This requires util-linux newer than 2.24 (unshare "-f"
# option and mount correctly support /proc/mounts)

# Exit if any errors
set -e

rwbind() { # dir
  mount --bind $1 $RD$1
}

robind() { # dir
  mount --bind -o ro $1 $RD$1
}

# If PID=1, this is in the new world
if [ $$ -eq 1 ]; then
  # Ensure the TMPDIR is given
  test -d "$TMPDIR"

  # Working sub-directories
  RD=$TMPDIR/root
  UD=$TMPDIR/storage
  WD=$TMPDIR/work
  mkdir -p $RD $UD $WD

  # Make private mount namespace
  mount --make-rprivate /

  # Prepare overlayed root directory
  if grep overlayfs /proc/filesystems > /dev/null 2>&1 ;then
    # Workaround for ubuntu 14.10 (out-of-tree overlayfs)
    mount -t overlayfs -o upperdir=$UD,lowerdir=/ overlayfs $RD
  else
    # This is for upstreamed overlayfs
    mount -t overlay -o upperdir=$UD,lowerdir=/,workdir=$WD overlayfs $RD
  fi

  # Prepare /dev special files
  mount -t tmpfs tmpfs $RD/dev
  mkdir $RD/dev/pts; rwbind /dev/pts
  touch $RD/dev/console; rwbind /dev/console
  touch $RD/dev/null; rwbind /dev/null
  touch $RD/dev/zero; robind /dev/zero
  # TODO: Add other devices here

  # Do not bind procfs, since it shows outside pids
  mount -t proc proc $RD/proc
  robind /proc/sys
  robind /proc/sysrq-trigger
  robind /proc/irq
  robind /proc/bus
  robind /sys

  # To unmount all unused mountpoints, use pivot_root to change root
  cd $RD
  mkdir -p .orig
  pivot_root . .orig
  umount -R .orig/ >/dev/null 2>&1 || echo -n

  # The original root can not unmount because it referred by overlayfs.
  # So, we pivot to the root again, and chroot to overlay directory.
  cd /.orig/
  pivot_root . mnt/

  exec chroot mnt/ $@
fi

usage() { # [error messages]
  test $# -ne 0 && echo "$*"
  echo "$0 - Run given command in a temporary namespace"
  echo "Usage: $0 [options] <command> [argument...]"
  echo " options:"
  echo "    -h or --help        Show this help"
  echo "    -k or --keep        Keep the temporary directory"
  echo "    -t or --temp <DIR>  Set DIR for temporary directory (imply -k)"
  exit $#
}

KEEPDIR=0
TMPDIR=
# Parse options
while [ "$1" ]; do
case "$1" in
  --keep|-k) # Keep the temporary directory
    KEEPDIR=1
    shift 1
    ;;
  --tempdir|-t) # Give a temporary directory (imply -k)
    KEEPDIR=1
    export TMPDIR=$2
    test -d "$TMPDIR" || usage "Error: $2 is not a directory"
    shift 2
    ;;
  --help|-h) # Help Message
    usage
    ;;
  [!-]*) # User given command
    break
    ;;
  *)
    usage "Parse error: $1 is not supported."
esac
done

if [ -z "$TMPDIR" ]; then
  export TMPDIR=`mktemp -d /tmp/chns-XXXXXXXX`
fi
if [ $KEEPDIR -eq 0 ]; then
  trap "rm -rf $TMPDIR" EXIT
else
  trap "echo Keep $TMPDIR" EXIT
fi

# Enter new namespace and exec command
unshare -iupf -m $0 $@

